{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport counterPain from \"./counter.slice\";\n\n// ---------------------------------------------------------------------------------------\n// initial value for any slice;\n\n// const initStateCount = { count: 0, showNumCount: true };\n\nconst iniStatAuth = {\n  isAuthenticated: false\n};\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// create any slice for use another event\n\n// const countSlice = createSlice({\n//   name: \"counterPain\",\n//   initialState: initStateCount,\n//   reducers: {\n//     increment: (state) => {\n//       state.count += 1;\n//     },\n//     decrement: (state) => {\n//       state.count -= 1;\n//     },\n//     increase: (state, action) => {\n//       state.count += action.payload.amount;\n//     },\n//     toggleChange: (state) => {\n//       state.showNumCount = !state.showNumCount;\n//     },\n//     //   aheee: (state) => {  console.log(state); },\n//   },\n// });\n\nconst authSlice = createSlice({\n  name: \"authPain\",\n  initialState: iniStatAuth,\n  reducers: {\n    login: state => {\n      state.isAuthenticated = true;\n    },\n    logout: state => {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// for use with dispatch\n//   countSlice.actions.increment();\n// export const countActions = countSlice.actions;\nexport const authActions = authSlice.actions;\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// only call one store na ja.\nconst store = configureStore({\n  reducer: {\n    //key is match a name of slice\n    //ไม่ match ร ะ เ บิ ด\n    counterPain: counterPain,\n    // `reducer` key must be used here\n    authPain: authSlice.reducer\n  }\n});\n// ---------------------------------------------------------------------------------------\n\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","counterPain","iniStatAuth","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","authActions","actions","store","reducer","authPain"],"sources":["/Users/thanapattrairatpanasan/Desktop/test01/src/store/store.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport counterPain from \"./counter.slice\";\n\n// ---------------------------------------------------------------------------------------\n// initial value for any slice;\n\n// const initStateCount = { count: 0, showNumCount: true };\n\nconst iniStatAuth = { isAuthenticated: false };\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// create any slice for use another event\n\n// const countSlice = createSlice({\n//   name: \"counterPain\",\n//   initialState: initStateCount,\n//   reducers: {\n//     increment: (state) => {\n//       state.count += 1;\n//     },\n//     decrement: (state) => {\n//       state.count -= 1;\n//     },\n//     increase: (state, action) => {\n//       state.count += action.payload.amount;\n//     },\n//     toggleChange: (state) => {\n//       state.showNumCount = !state.showNumCount;\n//     },\n//     //   aheee: (state) => {  console.log(state); },\n//   },\n// });\n\nconst authSlice = createSlice({\n  name: \"authPain\",\n  initialState: iniStatAuth,\n  reducers: {\n    login: (state) => {\n      state.isAuthenticated = true;\n    },\n    logout: (state) => {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// for use with dispatch\n//   countSlice.actions.increment();\n// export const countActions = countSlice.actions;\nexport const authActions = authSlice.actions;\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// only call one store na ja.\nconst store = configureStore({\n  reducer: {\n    //key is match a name of slice\n    //ไม่ match ร ะ เ บิ ด\n    counterPain: counterPain, // `reducer` key must be used here\n    authPain: authSlice.reducer,\n  },\n});\n// ---------------------------------------------------------------------------------------\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,OAAOC,WAAW,MAAM,iBAAiB;;AAEzC;AACA;;AAEA;;AAEA,MAAMC,WAAW,GAAG;EAAEC,eAAe,EAAE;AAAM,CAAC;;AAE9C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAEJ,WAAW;EACzBK,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChBA,KAAK,CAACN,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDO,MAAM,EAAGD,KAAK,IAAK;MACjBA,KAAK,CAACN,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAGP,SAAS,CAACQ,OAAO;AAC5C;;AAEA;AACA;AACA,MAAMC,KAAK,GAAGd,cAAc,CAAC;EAC3Be,OAAO,EAAE;IACP;IACA;IACAb,WAAW,EAAEA,WAAW;IAAE;IAC1Bc,QAAQ,EAAEX,SAAS,CAACU;EACtB;AACF,CAAC,CAAC;AACF;;AAEA,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}