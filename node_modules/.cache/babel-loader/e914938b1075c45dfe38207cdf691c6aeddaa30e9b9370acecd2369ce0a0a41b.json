{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n// ---------------------------------------------------------------------------------------\n// initial value for any slice;\nconst initStateCount = {\n  count: 0,\n  showNumCount: true\n};\nconst iniStatAuth = {\n  isAuthenticated: false\n};\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// create any slice for use another event\nconst countSlice = createSlice({\n  name: \"counterPain\",\n  initialState: initStateCount,\n  reducers: {\n    increment: state => {\n      state.count += 1;\n    },\n    decrement: state => {\n      state.count -= 1;\n    },\n    increase: (state, action) => {\n      state.count += action.payload.amount;\n    },\n    toggleChange: state => {\n      state.showNumCount = !state.showNumCount;\n    }\n    //   aheee: (state) => {  console.log(state); },\n  }\n});\nconst authSlice = createSlice({\n  name: \"authPain\",\n  initialState: iniStatAuth,\n  reducers: {\n    login: state => {\n      state.isAuthenticated = true;\n    },\n    logout: state => {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// for use with dispatch\n//   countSlice.actions.increment();\nexport const countActions = countSlice.actions;\nexport const authActions = authSlice.actions;\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// only call one store na ja.\nconst store = configureStore({\n  reducer: {\n    //key is match a name of slice\n    //ไม่ match ร ะ เ บิ ด\n    counterPain: countSlice.reducer,\n    // `reducer` key must be used here\n    authPain: authSlice.reducer\n  }\n});\n// ---------------------------------------------------------------------------------------\n\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initStateCount","count","showNumCount","iniStatAuth","isAuthenticated","countSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","amount","toggleChange","authSlice","login","logout","countActions","actions","authActions","store","reducer","counterPain","authPain"],"sources":["/Users/thanapattrairatpanasan/Desktop/test01/src/store/store.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n// ---------------------------------------------------------------------------------------\n// initial value for any slice;\nconst initStateCount = { count: 0, showNumCount: true };\n\nconst iniStatAuth = { isAuthenticated: false };\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// create any slice for use another event\nconst countSlice = createSlice({\n  name: \"counterPain\",\n  initialState: initStateCount,\n  reducers: {\n    increment: (state) => {\n      state.count += 1;\n    },\n    decrement: (state) => {\n      state.count -= 1;\n    },\n    increase: (state, action) => {\n      state.count += action.payload.amount;\n    },\n    toggleChange: (state) => {\n      state.showNumCount = !state.showNumCount;\n    },\n    //   aheee: (state) => {  console.log(state); },\n  },\n});\n\nconst authSlice = createSlice({\n  name: \"authPain\",\n  initialState: iniStatAuth,\n  reducers: {\n    login: (state) => {\n      state.isAuthenticated = true;\n    },\n    logout: (state) => {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// for use with dispatch\n//   countSlice.actions.increment();\nexport const countActions = countSlice.actions;\nexport const authActions = authSlice.actions;\n// ---------------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------------\n// only call one store na ja.\nconst store = configureStore({\n  reducer: {\n    //key is match a name of slice\n    //ไม่ match ร ะ เ บิ ด\n    counterPain: countSlice.reducer, // `reducer` key must be used here\n    authPain: authSlice.reducer,\n  },\n});\n// ---------------------------------------------------------------------------------------\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;;AAE9D;AACA;AACA,MAAMC,cAAc,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAEC,YAAY,EAAE;AAAK,CAAC;AAEvD,MAAMC,WAAW,GAAG;EAAEC,eAAe,EAAE;AAAM,CAAC;;AAE9C;;AAEA;AACA;AACA,MAAMC,UAAU,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAEP,cAAc;EAC5BQ,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACT,KAAK,IAAI,CAAC;IAClB,CAAC;IACDU,SAAS,EAAGD,KAAK,IAAK;MACpBA,KAAK,CAACT,KAAK,IAAI,CAAC;IAClB,CAAC;IACDW,QAAQ,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAK;MAC3BH,KAAK,CAACT,KAAK,IAAIY,MAAM,CAACC,OAAO,CAACC,MAAM;IACtC,CAAC;IACDC,YAAY,EAAGN,KAAK,IAAK;MACvBA,KAAK,CAACR,YAAY,GAAG,CAACQ,KAAK,CAACR,YAAY;IAC1C;IACA;EACF;AACF,CAAC,CAAC;AAEF,MAAMe,SAAS,GAAGlB,WAAW,CAAC;EAC5BO,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAEJ,WAAW;EACzBK,QAAQ,EAAE;IACRU,KAAK,EAAGR,KAAK,IAAK;MAChBA,KAAK,CAACN,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDe,MAAM,EAAGT,KAAK,IAAK;MACjBA,KAAK,CAACN,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA,OAAO,MAAMgB,YAAY,GAAGf,UAAU,CAACgB,OAAO;AAC9C,OAAO,MAAMC,WAAW,GAAGL,SAAS,CAACI,OAAO;AAC5C;;AAEA;AACA;AACA,MAAME,KAAK,GAAGzB,cAAc,CAAC;EAC3B0B,OAAO,EAAE;IACP;IACA;IACAC,WAAW,EAAEpB,UAAU,CAACmB,OAAO;IAAE;IACjCE,QAAQ,EAAET,SAAS,CAACO;EACtB;AACF,CAAC,CAAC;AACF;;AAEA,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}